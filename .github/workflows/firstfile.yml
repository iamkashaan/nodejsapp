name: CI-CD for Node.js App

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    # IMPORTANT: Grant write permissions to the GITHUB_TOKEN for this job.
    # This allows the workflow to push changes back to the repository.
    permissions:
      contents: write

    env:
      DOCKER_IMAGE: kashaankhan/kashaan-portfolio:${{ github.run_number }}

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v3

      - name: ‚öôÔ∏è Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: üì¶ Install Dependencies
        run: npm install

      - name: üß™ Run Tests (Optional)
        run: npm test || echo "No tests found"

      - name: üõ†Ô∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: üì§ Build and Push Docker Image
        run: |
          docker build -t $DOCKER_IMAGE .
          docker push $DOCKER_IMAGE

      - name: üìù Update Kubernetes Deployment and Push
        run: |
          # Configure Git with the GitHub Actions bot user for clear commit attribution.
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          DEPLOYMENT_FILE="argocd/k8s/deployment.yaml"

          if [ -f "$DEPLOYMENT_FILE" ]; then
            # Use sed to replace the image tag with the current GitHub run number.
            # We use a temporary file and then move it to ensure compatibility.
            sed "s|replaceImageTag|${{ github.run_number }}|g" "$DEPLOYMENT_FILE" > "$DEPLOYMENT_FILE.tmp" && mv "$DEPLOYMENT_FILE.tmp" "$DEPLOYMENT_FILE"
            
            # Add the modified deployment file to the Git staging area.
            git add "$DEPLOYMENT_FILE"
            
            # Check if there are actual changes before attempting to commit.
            # This prevents creating empty commits if the file content hasn't changed.
            if ! git diff --cached --quiet; then
              # Commit the changes with a descriptive message.
              git commit -m "üöÄ Update image to version ${{ github.run_number }}"
              # Push the changes to the 'main' branch.
              # The GITHUB_TOKEN automatically handles authentication for pushes to the same repo.
              git push
            else
              echo "No changes detected in $DEPLOYMENT_FILE. Skipping commit and push."
            fi
          else
            echo "‚ö†Ô∏è $DEPLOYMENT_FILE not found. Skipping image update."
          fi
